# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS
# graphic logo are (registered/a) trademark(s) of Plan International.
input UserIdentifierInput {
  use: String # -> .use
  system: String # -> .system
  value: String # -> .system
}

type UserIdentifier { # -> identifier
  use: String # -> .use
  system: String # -> .system
  value: String # -> .system
}

input SignatureInput {
  data: String
  type: String
}

input UserInput {
  id: ID
  name: [HumanNameInput]
  identifier: [UserIdentifierInput]
  username: String
  mobile: String
  role: String
  type: String
  email: String
  primaryOffice: String
  catchmentArea: [String]
  device: String
  signature: SignatureInput
}

type Signature {
  data: String
  type: String
}

type LocalRegistrar {
  name: [HumanName]!
  role: String!
  signature: Signature
}

type User {
  id: ID
  userMgntUserID: ID
  practitionerId: String
  name: [HumanName] # -> .name
  username: String
  mobile: String
  role: String
  type: String
  email: String
  status: String
  underInvestigation: Boolean
  primaryOffice: Location
  catchmentArea: [Location]
  localRegistrar: LocalRegistrar!
  identifier: Identifier
  signature: Signature
  creationDate: String
  device: String
}

type SearchUserResult {
  results: [User]
  totalItems: Int
}

input SecurityQuestionAnswer {
  questionKey: String
  answer: String
}

type SearchFieldAgentResult {
  results: [SearchFieldAgentResponse]
  totalItems: Int
}

type SearchFieldAgentResponse {
  practitionerId: String
  fullName: String
  type: String
  status: String
  primaryOfficeId: String
  creationDate: String
  totalNumberOfApplicationStarted: Int
  totalNumberOfInProgressAppStarted: Int
  totalNumberOfRejectedApplications: Int
  averageTimeForDeclaredApplications: Int
}

type VerifyPasswordResult {
  mobile: String
  scrope: [String]
  status: String
  username: String
  id: String
}

type Query {
  getUser(userId: String): User
  searchUsers(
    username: String
    mobile: String
    status: String
    role: String
    primaryOfficeId: String
    locationId: String
    count: Int
    skip: Int
    sort: String
  ): SearchUserResult
  searchFieldAgents(
    locationId: String
    primaryOfficeId: String
    status: String
    language: String
    timeStart: String!
    timeEnd: String!
    event: String
    count: Int
    skip: Int
    sort: String
  ): SearchFieldAgentResult
  verifyPasswordById(id: String!, password: String!): VerifyPasswordResult
}

type Mutation {
  createOrUpdateUser(user: UserInput!): User!
  activateUser(
    userId: String!
    password: String!
    securityQNAs: [SecurityQuestionAnswer]!
  ): String
  changePassword(
    userId: String!
    existingPassword: String!
    password: String!
  ): String
  auditUser(
    userId: String!
    action: String!
    reason: String!
    comment: String
  ): String
  resendSMSInvite(userId: String!): String
}
