# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS
# graphic logo are (registered/a) trademark(s) of Plan International.

type RegistrationMetrics {
  genderBasisMetrics: RegistrationGenderBasisMetrics
  timeFrames: RegistrationTimeFrameMetrics
  estimatedTargetDayMetrics: RegistrationTargetDayEstimatedMetrics
  payments: CertificationPaymentMetrics
}

type RegistrationGenderBasisMetrics {
  details: [GenderBasisDetailsMetrics!]
  total: GenderBasisTotalCount
}

type GenderBasisDetailsMetrics {
  location: ID!
  maleUnder18: Int!
  femaleUnder18: Int!
  maleOver18: Int!
  femaleOver18: Int!
  total: Int!
}

type GenderBasisTotalCount {
  maleUnder18: Int!
  femaleUnder18: Int!
  maleOver18: Int!
  femaleOver18: Int!
  total: Int!
}

type CertificationPaymentMetrics {
  details: [CertificationPaymentDetailsMetrics!]
  total: CertificationPaymentTotalCount
}

type CertificationPaymentDetailsMetrics {
  total: Int!
  locationId: String!
}

type CertificationPaymentTotalCount {
  total: Int!
}

type RegistrationTimeFrameMetrics {
  details: [TimeFrameDetailMetrics!]
  total: TimeFrameTotalCount
}

type RegistrationTargetDayEstimatedMetrics {
  details: [EstimatedTargetDayMetrics!]
  total: EstimateTargetDayTotalCount
}

type EstimateTargetDayTotalCount {
  estimatedRegistration: Float!
  registrationInTargetDay: Int!
  estimationPercentage: Float!
}

type EstimatedTargetDayMetrics {
  locationId: String!
  estimatedRegistration: Float!
  registrationInTargetDay: Int!
  estimationYear: Int!
  estimationLocationLevel: String!
  estimationPercentage: Float!
}

type TimeFrameTotalCount {
  regWithinTargetd: Int!
  regWithinTargetdTo1yr: Int!
  regWithin1yrTo5yr: Int!
  regOver5yr: Int!
  total: Int!
}

type TimeFrameDetailMetrics {
  locationId: String!
  regWithinTargetd: Int!
  regWithinTargetdTo1yr: Int!
  regWithin1yrTo5yr: Int!
  regOver5yr: Int!
  total: Int!
}

type BirthRegistrationByAgeMetrics {
  label: String
  value: Int
}

type BirthRegistrationWithInTargetD {
  label: String
  value: Int
  totalEstimate: Int
}

type BirthKeyFigures {
  label: String
  value: Int
  total: Int
  estimate: Int
  categoricalData: [BirthKeyFiguresData]
}

type BirthKeyFiguresData {
  name: String
  value: Int
}

type EventEstimationMetrics {
  birthTargetDayMetrics: EstimationMetrics
  deathTargetDayMetrics: EstimationMetrics
}

type EstimationMetrics {
  actualRegistration: Int!
  estimatedRegistration: Float!
  estimatedPercentage: Float!
  malePercentage: Float!
  femalePercentage: Float!
}

type ApplicationsStartedMetrics {
  fieldAgentApplications: Int!
  hospitalApplications: Int!
  officeApplications: Int!
}

type MonthWiseEstimationMetrics {
  details: [MonthWiseTargetDayEstimation]
  total: EventInTargetDayEstimationCount
}

type MonthWiseTargetDayEstimation {
  actualTotalRegistration: Int!
  actualTargetDayRegistration: Int!
  estimatedRegistration: Float!
  estimatedTargetDayPercentage: Float!
  month: String!
  year: String!
  startOfMonth: String!
  endOfMonth: String!
}

type EventInTargetDayEstimationCount {
  actualTotalRegistration: Int!
  actualTargetDayRegistration: Int!
  estimatedRegistration: Float!
  estimatedTargetDayPercentage: Float!
}

type LocationWiseEstimationMetrics {
  details: [LocationWiseTargetDayEstimation]
  total: EventInTargetDayEstimationCount
}

type LocationWiseTargetDayEstimation {
  actualTotalRegistration: Int!
  actualTargetDayRegistration: Int!
  estimatedRegistration: Float!
  estimatedTargetDayPercentage: Float!
  locationId: String!
  locationName: String!
}

type TimeLoggedMetrics {
  status: String!
  trackingId: String
  eventType: String!
  time: String!
}

type TimeLoggedMetricsResultSet {
  results: [TimeLoggedMetrics]
  totalItems: Int
}

type Query {
  fetchRegistrationMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
    event: String!
  ): RegistrationMetrics
  getEventEstimationMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
  ): EventEstimationMetrics
  getApplicationsStartedMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
  ): ApplicationsStartedMetrics
  fetchMonthWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
    event: String!
  ): MonthWiseEstimationMetrics
  fetchLocationWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
    event: String!
  ): LocationWiseEstimationMetrics
  fetchTimeLoggedMetricsByPractitioner(
    timeStart: String!
    timeEnd: String!
    practitionerId: String!
    locationId: String!
    count: Int!
  ): TimeLoggedMetricsResultSet
}
