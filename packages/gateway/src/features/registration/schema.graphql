enum RegStatus {
  DECLARED
  REGISTERED
  CERTIFIED
  REJECTED
}

enum BirthRegType {
  BOTH_PARENTS
  SELF
  INFORMANT_ONLY
  MOTHER_ONLY
  FATHER_ONLY
}

enum RegistrationContactType {
  BOTH
  MOTHER
  FATHER
}

enum BirthRegPresence {
  BOTH_PARENTS
  INFORMANT_ONLY
  MOTHER_ONLY
  FATHER_ONLY
  OTHER
}

enum BirthType {
  SINGLE
  TWIN
  TRIPLET
  QUADRUPLET
  HIGHER_MULTIPLE_DELIVERY
}

enum AttendantType {
  PHYSICIAN
  NURSE
  NURSE_MIDWIFE
  MIDWIFE
  OTHER_PARAMEDICAL_PERSONNEL
  LAYPERSON
  NONE
  OTHER
}

enum AttachmentType {
  PASSPORT
  NATIONAL_ID_FRONT
  NATIONAL_ID_BACK
  IMMUNISATION_CERTIFICATE
  PAPER_FORM
  PASSPORT_PHOTO
  BIRTH_REGISTRATION
  SCHOOL_CERTIFICATE
  PROOF_OF_DEATH
  OTHER
  POST_MORTEM_CERTIFICATE
  HOSPITAL_DISCHARGE_CERTIFICATE
  ATTESTED_DEATH_LETTER
  ATTESTED_DEATH_CERTIFICATE
  BURIAL_RECEIPT
  FUNERAL_RECEIPT
  DOCTOR_CERTIFICATE
  EPI_CARD
  BIRTH_PLACE_DATE_PROOF
}

enum AttachmentSubject {
  MOTHER
  FATHER
  CHILD
  OTHER
  DECEASED_ID_PROOF
  DECEASED_PARMANENT_ADDRESS_PROOF
  DECEASED_DEATH_PROOF
  DECEASED_BIRTH_PROOF
  APPLICANT_ID_PROOF
}

enum RegistrationType {
  BIRTH
  DEATH
}

enum MannerOfDeath {
  NATURAL_CAUSES
  ACCIDENT
  SUICIDE
  HOMICIDE
  UNDETERMINED
}

enum PaymentType {
  MANUAL
}

enum PaymentOutcomeType {
  COMPLETED
  ERROR
  PARTIAL
}

enum CauseOfDeathMethodType {
  VERBAL_AUTOPSY
  MEDICALLY_CERTIFIED
}

input PaymentInput {
  paymentId: ID
  type: PaymentType
  total: Float
  amount: Float
  outcome: PaymentOutcomeType
  date: Date
}

type Payment { # -> PaymentReconciliation
  paymentId: ID # -> .identifier
  type: PaymentType # -> .detail.type
  total: Float # -> .total
  amount: Float # .detail.amount
  outcome: PaymentOutcomeType # -> .outcome
  date: Date # -> .detail.date
}

input CommentInput {
  user: UserInput
  comment: String
  createdAt: Date
}

type Comment { # Annotation
  id: ID!
  user: User # -> .authorString
  comment: String # -> .text
  createdAt: Date # -> .time
}

input RegWorkflowInput {
  type: RegStatus
  user: UserInput
  timestamp: Date
  comments: [CommentInput]
  location: LocationInput
}

type RegWorkflow { # Task
  id: ID!
  type: RegStatus # -> .businessStatus
  user: User # -> extension(url='http://opencrvs.org/specs/extension/regLastUser').valueReference
  timestamp: Date # -> lastModified
  comments: [Comment] # -> .note
  location: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastLocation').valueReference
  office: Location # -> extension(url='http://opencrvs.org/specs/extension/regLastOffice').valueReference
}

interface EventRegistration {
  id: ID! # long uuid
  registration: Registration
  createdAt: Date
}

input BirthRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  child: PersonInput
  mother: PersonInput
  father: PersonInput
  informant: PersonInput
  eventLocation: LocationInput
  birthType: BirthType # Not in BDRIS2
  weightAtBirth: Float # Not in BDRIS2
  attendantAtBirth: AttendantType # Not in BDRIS2
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType
  presentAtBirthRegistration: BirthRegPresence # Informant in BDRIS2
  otherPresentAtBirthRegistration: String
  childrenBornAliveToMother: Int # Not in BDRIS2
  foetalDeathsToMother: Int # Not in BDRIS2
  lastPreviousLiveBirth: Date # Not in BDRIS2
  createdAt: Date
  updatedAt: Date
}

type BirthRegistration implements EventRegistration { # -> Composition
  id: ID! # long uuid
  _fhirIDMap: Map
  registration: Registration
  child: Person # -> .section(code='child-details').entry.reference
  mother: Person # -> .section(code='mother-details').entry.reference
  father: Person # -> .section(code='father-details').entry.reference
  informant: Person # -> .section(code='informant-details').entry.reference
  eventLocation: Location
  birthType: BirthType # -> Observation.valueInteger
  weightAtBirth: Float # -> Observation.valueQuantity (code=kg)
  attendantAtBirth: AttendantType # -> Observation.valueString
  otherAttendantAtBirth: String
  birthRegistrationType: BirthRegType # -> Observation.valueString
  presentAtBirthRegistration: BirthRegPresence # -> Observation.valueString
  otherPresentAtBirthRegistration: String
  childrenBornAliveToMother: Int # -> Observation.valueInteger
  foetalDeathsToMother: Int # -> Observation.valueInteger
  lastPreviousLiveBirth: Date # -> Observation.valueDateTime
  createdAt: Date # -> .date($first)
  updatedAt: Date # -> .date
}

input DeathRegistrationInput {
  _fhirIDMap: Map
  registration: RegistrationInput
  # Remember to mark person as deceased
  deceased: PersonInput
  informant: RelatedPersonInput # -> Use for applicant ->.section(code='informant-details').entry.reference
  eventLocation: LocationInput
  mannerOfDeath: MannerOfDeath # -> Observation.valueCodeableConcept
  causeOfDeathMethod: CauseOfDeathMethodType # -> Observation.valueCodeableConcept
  causeOfDeath: String # need to store ICD-10? More types of cause of death
  createdAt: Date
  updatedAt: Date
}

# In BDRIS2 BRN is used to link to birth - Must have BRN to register death. Only deathLocation and current address is captures for death as the rest is the same as birth registration
type DeathRegistration implements EventRegistration { # -> Composition
  id: ID! # long uuid
  _fhirIDMap: Map
  registration: Registration
  # Remember to mark person as deceased
  deceased: Person # -> .section(code='deceased-details').entry.reference
  informant: RelatedPerson # -> Use for applicant ->.section(code='informant-details').entry.reference
  eventLocation: Location
  mannerOfDeath: MannerOfDeath # -> Observation.valueCodeableConcept
  causeOfDeathMethod: CauseOfDeathMethodType # -> Observation.valueCodeableConcept
  causeOfDeath: String # -> Observation.valueCodeableConcept
  createdAt: Date # -> .date($first)
  updatedAt: Date # -> .date
}

input RegistrationInput {
  _fhirID: ID
  # short uuid easy to remember
  trackingId: String
  # BRN (Birth Registration Number) DRN (Death Registration Number) - Format to be decided
  registrationNumber: String
  paperFormID: String
  page: String
  book: String
  contact: RegistrationContactType # -> extension(url='http://opencrvs.org/specs/extension/contact-person').valueString
  contactPhoneNumber: String
  status: [RegWorkflowInput]
  type: RegistrationType
  attachments: [AttachmentInput]
  certificates: [CertificateInput]
  location: LocationInput
}

type Registration { # -> Task
  id: ID # -> .id
  _fhirID: ID # -> .id
  # short uuid easy to remember
  trackingId: String # -> .identifier
  # BRN (Birth Registration Number) DRN (Death Registration Number) - Format to be decided
  registrationNumber: String # -> .identifier
  paperFormID: String # -> .identifier
  page: String # -> .identifier
  book: String # -> .identifier
  contact: RegistrationContactType # -> extension(url='http://opencrvs.org/specs/extension/contact-person').valueString
  contactPhoneNumber: String # -> extension(url='http://opencrvs.org/specs/extension/contact-person-phone-number').valueString
  status: [RegWorkflow] # -> Task.*
  type: RegistrationType # -> .code
  attachments: [Attachment] # -> Composition.section(code='scanned-documents').entry.reference
  certificates: [Certificate] # -> Composition.section(code='certificates').entry.reference
  duplicates: [ID]
}

input CertificateInput {
  collector: RelatedPersonInput
  hasShowedVerifiedDocument: Boolean
  payments: [PaymentInput]
  data: String
}

type Certificate { # -> Document Reference
  collector: RelatedPerson # -> .extension
  hasShowedVerifiedDocument: Boolean # -> .extension
  payments: [Payment] # -> .extension
  data: String # -> .content.attachment.data base64
}

input AttachmentInput {
  _fhirID: ID
  contentType: String
  # base64
  data: String
  # approved/validated/deleted
  status: String
  originalFileName: String
  systemFileName: String
  type: AttachmentType
  description: String # -> use for other document type -> .description
  subject: AttachmentSubject
  createdAt: Date
}

type Attachment { # -> DocumentReference
  id: ID! # uuid
  _fhirID: ID # -> .id
  contentType: String # -> .content.attachment.contentType
  # base64
  data: String # -> .content.attachment.data base64
  # approved/validated/deleted
  status: String # -> .status
  originalFileName: String # -> .identifier
  systemFileName: String # -> .identifier
  type: AttachmentType # -> .type
  description: String # -> use for other document type -> .description
  subject: AttachmentSubject # -> .subject (convert this to a reference to the person resoure in FHIR)
  createdAt: Date # -> .created
}

type BirthRegResultSet {
  results: [BirthRegistration]
  totalItems: Int
}

type DeathRegResultSet {
  results: [DeathRegistration]
  totalItems: Int
}

type EventRegResultSet {
  results: [EventRegistration]
  totalItems: Int
}

type RegistrationCount {
  declared: Int
  rejected: Int
}

type Query {
  fetchBirthRegistration(id: ID!): BirthRegistration
  queryRegistrationByIdentifier(identifier: ID!): BirthRegistration
  queryPersonByIdentifier(identifier: ID!): Person
  listBirthRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
    count: Int
    skip: Int
  ): BirthRegResultSet
  fetchDeathRegistration(id: ID!): DeathRegistration
  listDeathRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
    count: Int
    skip: Int
  ): DeathRegResultSet
  fetchEventRegistration(id: ID!): EventRegistration
  listEventRegistrations(
    locationIds: [String]
    status: String
    userId: String
    from: Date
    to: Date
    count: Int
    skip: Int
  ): EventRegResultSet
  countEventRegistrations(locationIds: [String]): RegistrationCount
}

type Mutation {
  # BIRTH
  createBirthRegistration(details: BirthRegistrationInput!): ID!
  updateBirthRegistration(id: ID!, details: BirthRegistrationInput!): ID!
  # process transitions
  markBirthAsVerified(
    id: ID!
    details: BirthRegistrationInput
  ): BirthRegistration # updates status to 'verified' + audit? - attachments are valid and in order, ready for registration - internally call update if details exists
  markBirthAsRegistered(id: ID!, details: BirthRegistrationInput): ID! # updates status to 'registered' - registration clerk has accepted the declaration, it is now official - internally call update if details exists
  markBirthAsCertified(id: ID!, details: BirthRegistrationInput!): ID! # updates status to 'certified' - a printed certificate has been produced - internally call update if details exists
  markEventAsVoided(id: String!, reason: String!, comment: String): ID! # updated status to 'voided' - the registration was captured in error
  notADuplicate(id: String!, duplicateId: String!): ID! # removes duplicates from composition
  # DEATH
  createDeathRegistration(details: DeathRegistrationInput!): ID!
  updateDeathRegistration(id: ID!, details: DeathRegistrationInput!): ID!
  # process transitions
  markDeathAsVerified(
    id: ID!
    details: DeathRegistrationInput
  ): DeathRegistration # updates status to 'verified' + audit? - attachments are valid and in order, ready for registration
  markDeathAsRegistered(id: ID!, details: DeathRegistrationInput): ID! # updates status to 'registered' - registration clerk has accepted the declaration, it is now official
  markDeathAsCertified(id: ID!, details: DeathRegistrationInput!): ID! # updates status to 'certified' - a printed certificate has been produced
}
