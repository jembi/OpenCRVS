/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql'
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  listNotifications?: Array<GQLNotification | null>
  fetchBirthRegistration?: GQLBirthRegistration
  queryRegistrationByIdentifier?: GQLBirthRegistration
  queryPersonByIdentifier?: GQLPerson
  listBirthRegistrations?: GQLBirthRegResultSet
  fetchDeathRegistration?: GQLDeathRegistration
  listDeathRegistrations?: GQLDeathRegResultSet
  fetchEventRegistration?: GQLEventRegistration
  listEventRegistrations?: GQLEventRegResultSet
  countEventRegistrations?: GQLRegistrationCount
  locationsByParent?: Array<GQLLocation | null>
  locationById?: GQLLocation
  getUser?: GQLUser
}

export type GQLDate = any

export interface GQLNotification {
  id: string
  child?: GQLPerson
  mother?: GQLPerson
  father?: GQLPerson
  informant?: GQLPerson
  location?: GQLLocation
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLPerson {
  id?: string
  _fhirID?: string
  identifier?: Array<GQLIdentityType | null>
  name?: Array<GQLHumanName | null>
  telecom?: Array<GQLContactPoint | null>
  gender?: string
  birthDate?: string
  maritalStatus?: GQLMaritalStatusType
  dateOfMarriage?: GQLDate
  multipleBirth?: number
  address?: Array<GQLAddress | null>
  photo?: Array<GQLAttachment | null>
  deceased?: GQLDeceased
  nationality?: Array<string | null>
  educationalAttainment?: GQLEducationType
}

export interface GQLIdentityType {
  id?: string
  type?: GQLIdentityIDType
  otherType?: string
}

export enum GQLIdentityIDType {
  PASSPORT = 'PASSPORT',
  NATIONAL_ID = 'NATIONAL_ID',
  DRIVING_LICENSE = 'DRIVING_LICENSE',
  BIRTH_REGISTRATION_NUMBER = 'BIRTH_REGISTRATION_NUMBER',
  DEATH_REGISTRATION_NUMBER = 'DEATH_REGISTRATION_NUMBER',
  REFUGEE_NUMBER = 'REFUGEE_NUMBER',
  ALIEN_NUMBER = 'ALIEN_NUMBER',
  OTHER = 'OTHER',
  NO_ID = 'NO_ID'
}

export interface GQLHumanName {
  use?: string
  firstNames?: string
  familyName?: string
}

export interface GQLContactPoint {
  system?: string
  value?: string
  use?: string
}

export enum GQLMaritalStatusType {
  SINGLE = 'SINGLE',
  MARRIED = 'MARRIED',
  WIDOWED = 'WIDOWED',
  DIVORCED = 'DIVORCED',
  NOT_STATED = 'NOT_STATED'
}

export interface GQLAddress {
  use?: string
  type?: GQLAddressType
  text?: string
  line?: Array<string | null>
  city?: string
  district?: string
  state?: string
  postalCode?: string
  country?: string
  from?: GQLDate
  to?: GQLDate
}

export enum GQLAddressType {
  HEALTH_FACILITY = 'HEALTH_FACILITY',
  ADMIN_STRUCTURE = 'ADMIN_STRUCTURE',
  CRVS_OFFICE = 'CRVS_OFFICE',
  PRIVATE_HOME = 'PRIVATE_HOME',
  CURRENT = 'CURRENT',
  PERMANENT = 'PERMANENT',
  MILITARY_BASE_OR_CANTONMENT = 'MILITARY_BASE_OR_CANTONMENT',
  IDP_CAMP = 'IDP_CAMP',
  UNHCR_CAMP = 'UNHCR_CAMP',
  OTHER = 'OTHER'
}

export interface GQLAttachment {
  id: string
  _fhirID?: string
  contentType?: string
  data?: string
  status?: string
  originalFileName?: string
  systemFileName?: string
  type?: GQLAttachmentType
  description?: string
  subject?: GQLAttachmentSubject
  createdAt?: GQLDate
}

export enum GQLAttachmentType {
  PASSPORT = 'PASSPORT',
  NATIONAL_ID_FRONT = 'NATIONAL_ID_FRONT',
  NATIONAL_ID_BACK = 'NATIONAL_ID_BACK',
  IMMUNISATION_CERTIFICATE = 'IMMUNISATION_CERTIFICATE',
  PAPER_FORM = 'PAPER_FORM',
  PASSPORT_PHOTO = 'PASSPORT_PHOTO',
  BIRTH_REGISTRATION = 'BIRTH_REGISTRATION',
  SCHOOL_CERTIFICATE = 'SCHOOL_CERTIFICATE',
  PROOF_OF_DEATH = 'PROOF_OF_DEATH',
  OTHER = 'OTHER',
  POST_MORTEM_CERTIFICATE = 'POST_MORTEM_CERTIFICATE',
  HOSPITAL_DISCHARGE_CERTIFICATE = 'HOSPITAL_DISCHARGE_CERTIFICATE',
  ATTESTED_DEATH_LETTER = 'ATTESTED_DEATH_LETTER',
  ATTESTED_DEATH_CERTIFICATE = 'ATTESTED_DEATH_CERTIFICATE',
  BURIAL_RECEIPT = 'BURIAL_RECEIPT',
  FUNERAL_RECEIPT = 'FUNERAL_RECEIPT',
  DOCTOR_CERTIFICATE = 'DOCTOR_CERTIFICATE',
  EPI_CARD = 'EPI_CARD',
  BIRTH_PLACE_DATE_PROOF = 'BIRTH_PLACE_DATE_PROOF'
}

export enum GQLAttachmentSubject {
  MOTHER = 'MOTHER',
  FATHER = 'FATHER',
  CHILD = 'CHILD',
  OTHER = 'OTHER',
  DECEASED_ID_PROOF = 'DECEASED_ID_PROOF',
  DECEASED_PARMANENT_ADDRESS_PROOF = 'DECEASED_PARMANENT_ADDRESS_PROOF',
  DECEASED_DEATH_PROOF = 'DECEASED_DEATH_PROOF',
  DECEASED_BIRTH_PROOF = 'DECEASED_BIRTH_PROOF',
  APPLICANT_ID_PROOF = 'APPLICANT_ID_PROOF'
}

export interface GQLDeceased {
  deceased?: boolean
  deathDate?: string
}

export enum GQLEducationType {
  NO_SCHOOLING = 'NO_SCHOOLING',
  PRIMARY_ISCED_1 = 'PRIMARY_ISCED_1',
  LOWER_SECONDARY_ISCED_2 = 'LOWER_SECONDARY_ISCED_2',
  UPPER_SECONDARY_ISCED_3 = 'UPPER_SECONDARY_ISCED_3',
  POST_SECONDARY_ISCED_4 = 'POST_SECONDARY_ISCED_4',
  FIRST_STAGE_TERTIARY_ISCED_5 = 'FIRST_STAGE_TERTIARY_ISCED_5',
  SECOND_STAGE_TERTIARY_ISCED_6 = 'SECOND_STAGE_TERTIARY_ISCED_6',
  NOT_STATED = 'NOT_STATED'
}

export interface GQLLocation {
  id: string
  _fhirID?: string
  identifier?: Array<GQLIdentifier | null>
  status?: string
  name?: string
  alias?: Array<string | null>
  description?: string
  partOf?: string
  type?: GQLLocationType
  telecom?: Array<GQLContactPoint | null>
  address?: GQLAddress
  longitude?: number
  latitude?: number
  altitude?: number
  geoData?: string
}

export interface GQLIdentifier {
  system?: string
  value?: string
}

export enum GQLLocationType {
  HEALTH_FACILITY = 'HEALTH_FACILITY',
  HOSPITAL = 'HOSPITAL',
  OTHER_HEALTH_INSTITUTION = 'OTHER_HEALTH_INSTITUTION',
  ADMIN_STRUCTURE = 'ADMIN_STRUCTURE',
  CRVS_OFFICE = 'CRVS_OFFICE',
  PRIVATE_HOME = 'PRIVATE_HOME',
  CURRENT = 'CURRENT',
  PERMANENT = 'PERMANENT',
  MILITARY_BASE_OR_CANTONMENT = 'MILITARY_BASE_OR_CANTONMENT',
  IDP_CAMP = 'IDP_CAMP',
  UNHCR_CAMP = 'UNHCR_CAMP',
  OTHER = 'OTHER'
}

export interface GQLBirthRegistration extends GQLEventRegistration {
  id: string
  _fhirIDMap?: GQLMap
  registration?: GQLRegistration
  child?: GQLPerson
  mother?: GQLPerson
  father?: GQLPerson
  informant?: GQLPerson
  eventLocation?: GQLLocation
  birthType?: GQLBirthType
  weightAtBirth?: number
  attendantAtBirth?: GQLAttendantType
  otherAttendantAtBirth?: string
  birthRegistrationType?: GQLBirthRegType
  presentAtBirthRegistration?: GQLBirthRegPresence
  otherPresentAtBirthRegistration?: string
  childrenBornAliveToMother?: number
  foetalDeathsToMother?: number
  lastPreviousLiveBirth?: GQLDate
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLEventRegistration {
  id: string
  registration?: GQLRegistration
  createdAt?: GQLDate
}

/** Use this to resolve interface type EventRegistration */
export type GQLPossibleEventRegistrationTypeNames =
  | 'BirthRegistration'
  | 'DeathRegistration'

export interface GQLEventRegistrationNameMap {
  EventRegistration: GQLEventRegistration
  BirthRegistration: GQLBirthRegistration
  DeathRegistration: GQLDeathRegistration
}

export interface GQLRegistration {
  id?: string
  _fhirID?: string
  trackingId?: string
  registrationNumber?: string
  paperFormID?: string
  page?: string
  book?: string
  contact?: GQLRegistrationContactType
  contactPhoneNumber?: string
  status?: Array<GQLRegWorkflow | null>
  type?: GQLRegistrationType
  attachments?: Array<GQLAttachment | null>
  certificates?: Array<GQLCertificate | null>
  duplicates?: Array<string | null>
}

export enum GQLRegistrationContactType {
  BOTH = 'BOTH',
  MOTHER = 'MOTHER',
  FATHER = 'FATHER'
}

export interface GQLRegWorkflow {
  id: string
  type?: GQLRegStatus
  user?: GQLUser
  timestamp?: GQLDate
  comments?: Array<GQLComment | null>
  location?: GQLLocation
  office?: GQLLocation
}

export enum GQLRegStatus {
  DECLARED = 'DECLARED',
  REGISTERED = 'REGISTERED',
  CERTIFIED = 'CERTIFIED',
  REJECTED = 'REJECTED'
}

export interface GQLUser {
  id: string
  userMgntUserID?: string
  name?: Array<GQLHumanName | null>
  role?: string
  primaryOffice?: GQLLocation
  currentLocation?: GQLLocation
  catchmentArea?: Array<GQLLocation | null>
}

export interface GQLComment {
  id: string
  user?: GQLUser
  comment?: string
  createdAt?: GQLDate
}

export enum GQLRegistrationType {
  BIRTH = 'BIRTH',
  DEATH = 'DEATH'
}

export interface GQLCertificate {
  collector?: GQLRelatedPerson
  hasShowedVerifiedDocument?: boolean
  payments?: Array<GQLPayment | null>
  data?: string
}

export interface GQLRelatedPerson {
  id?: string
  _fhirID?: string
  relationship?: GQLRelationshipType
  otherRelationship?: string
  individual?: GQLPerson
}

export enum GQLRelationshipType {
  FATHER = 'FATHER',
  MOTHER = 'MOTHER',
  SPOUSE = 'SPOUSE',
  SON = 'SON',
  DAUGHTER = 'DAUGHTER',
  EXTENDED_FAMILY = 'EXTENDED_FAMILY',
  OTHER = 'OTHER',
  INFORMANT = 'INFORMANT'
}

export interface GQLPayment {
  paymentId?: string
  type?: GQLPaymentType
  total?: number
  amount?: number
  outcome?: GQLPaymentOutcomeType
  date?: GQLDate
}

export enum GQLPaymentType {
  MANUAL = 'MANUAL'
}

export enum GQLPaymentOutcomeType {
  COMPLETED = 'COMPLETED',
  ERROR = 'ERROR',
  PARTIAL = 'PARTIAL'
}

export type GQLMap = any

export enum GQLBirthType {
  SINGLE = 'SINGLE',
  TWIN = 'TWIN',
  TRIPLET = 'TRIPLET',
  QUADRUPLET = 'QUADRUPLET',
  HIGHER_MULTIPLE_DELIVERY = 'HIGHER_MULTIPLE_DELIVERY'
}

export enum GQLAttendantType {
  PHYSICIAN = 'PHYSICIAN',
  NURSE = 'NURSE',
  NURSE_MIDWIFE = 'NURSE_MIDWIFE',
  MIDWIFE = 'MIDWIFE',
  OTHER_PARAMEDICAL_PERSONNEL = 'OTHER_PARAMEDICAL_PERSONNEL',
  LAYPERSON = 'LAYPERSON',
  NONE = 'NONE',
  OTHER = 'OTHER'
}

export enum GQLBirthRegType {
  BOTH_PARENTS = 'BOTH_PARENTS',
  SELF = 'SELF',
  INFORMANT_ONLY = 'INFORMANT_ONLY',
  MOTHER_ONLY = 'MOTHER_ONLY',
  FATHER_ONLY = 'FATHER_ONLY'
}

export enum GQLBirthRegPresence {
  BOTH_PARENTS = 'BOTH_PARENTS',
  INFORMANT_ONLY = 'INFORMANT_ONLY',
  MOTHER_ONLY = 'MOTHER_ONLY',
  FATHER_ONLY = 'FATHER_ONLY',
  OTHER = 'OTHER'
}

export interface GQLBirthRegResultSet {
  results?: Array<GQLBirthRegistration | null>
  totalItems?: number
}

export interface GQLDeathRegistration extends GQLEventRegistration {
  id: string
  _fhirIDMap?: GQLMap
  registration?: GQLRegistration
  deceased?: GQLPerson
  informant?: GQLRelatedPerson
  eventLocation?: GQLLocation
  mannerOfDeath?: GQLMannerOfDeath
  causeOfDeathMethod?: GQLCauseOfDeathMethodType
  causeOfDeath?: string
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export enum GQLMannerOfDeath {
  NATURAL_CAUSES = 'NATURAL_CAUSES',
  ACCIDENT = 'ACCIDENT',
  SUICIDE = 'SUICIDE',
  HOMICIDE = 'HOMICIDE',
  UNDETERMINED = 'UNDETERMINED'
}

export enum GQLCauseOfDeathMethodType {
  VERBAL_AUTOPSY = 'VERBAL_AUTOPSY',
  MEDICALLY_CERTIFIED = 'MEDICALLY_CERTIFIED'
}

export interface GQLDeathRegResultSet {
  results?: Array<GQLDeathRegistration | null>
  totalItems?: number
}

export interface GQLEventRegResultSet {
  results?: Array<GQLEventRegistration | null>
  totalItems?: number
}

export interface GQLRegistrationCount {
  declared?: number
  rejected?: number
}

export interface GQLMutation {
  createNotification: GQLNotification
  voidNotification?: GQLNotification
  createBirthRegistration: string
  updateBirthRegistration: string
  markBirthAsVerified?: GQLBirthRegistration
  markBirthAsRegistered: string
  markBirthAsCertified: string
  markEventAsVoided: string
  notADuplicate: string
  createDeathRegistration: string
  updateDeathRegistration: string
  markDeathAsVerified?: GQLDeathRegistration
  markDeathAsRegistered: string
  markDeathAsCertified: string
}

export interface GQLNotificationInput {
  child?: GQLPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  informant?: GQLPersonInput
  location?: GQLLocationInput
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLPersonInput {
  _fhirID?: string
  identifier?: Array<GQLIdentityInput | null>
  name?: Array<GQLHumanNameInput | null>
  telecom?: Array<GQLContactPointInput | null>
  gender?: string
  birthDate?: string
  maritalStatus?: GQLMaritalStatusType
  dateOfMarriage?: GQLDate
  multipleBirth?: number
  address?: Array<GQLAddressInput | null>
  photo?: Array<GQLAttachmentInput | null>
  deceased?: GQLDeceasedInput
  nationality?: Array<string | null>
  educationalAttainment?: GQLEducationType
}

export interface GQLIdentityInput {
  id?: string
  type?: GQLIdentityIDType
  otherType?: string
}

export interface GQLHumanNameInput {
  use?: string
  firstNames?: string
  familyName?: string
}

export interface GQLContactPointInput {
  system?: string
  value?: string
  use?: string
}

export interface GQLAddressInput {
  use?: string
  type?: GQLAddressType
  text?: string
  line?: Array<string | null>
  city?: string
  district?: string
  state?: string
  postalCode?: string
  country?: string
  from?: GQLDate
  to?: GQLDate
}

export interface GQLAttachmentInput {
  _fhirID?: string
  contentType?: string
  data?: string
  status?: string
  originalFileName?: string
  systemFileName?: string
  type?: GQLAttachmentType
  description?: string
  subject?: GQLAttachmentSubject
  createdAt?: GQLDate
}

export interface GQLDeceasedInput {
  deceased?: boolean
  deathDate?: string
}

export interface GQLLocationInput {
  _fhirID?: string
  identifier?: Array<string | null>
  status?: string
  name?: string
  alias?: Array<string | null>
  description?: string
  partOf?: string
  type?: GQLLocationType
  telecom?: Array<GQLContactPointInput | null>
  address?: GQLAddressInput
  longitude?: number
  latitude?: number
  altitude?: number
  geoData?: string
}

export interface GQLBirthRegistrationInput {
  _fhirIDMap?: GQLMap
  registration?: GQLRegistrationInput
  child?: GQLPersonInput
  mother?: GQLPersonInput
  father?: GQLPersonInput
  informant?: GQLPersonInput
  eventLocation?: GQLLocationInput
  birthType?: GQLBirthType
  weightAtBirth?: number
  attendantAtBirth?: GQLAttendantType
  otherAttendantAtBirth?: string
  birthRegistrationType?: GQLBirthRegType
  presentAtBirthRegistration?: GQLBirthRegPresence
  otherPresentAtBirthRegistration?: string
  childrenBornAliveToMother?: number
  foetalDeathsToMother?: number
  lastPreviousLiveBirth?: GQLDate
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLRegistrationInput {
  _fhirID?: string
  trackingId?: string
  registrationNumber?: string
  paperFormID?: string
  page?: string
  book?: string
  contact?: GQLRegistrationContactType
  contactPhoneNumber?: string
  status?: Array<GQLRegWorkflowInput | null>
  type?: GQLRegistrationType
  attachments?: Array<GQLAttachmentInput | null>
  certificates?: Array<GQLCertificateInput | null>
  location?: GQLLocationInput
}

export interface GQLRegWorkflowInput {
  type?: GQLRegStatus
  user?: GQLUserInput
  timestamp?: GQLDate
  comments?: Array<GQLCommentInput | null>
  location?: GQLLocationInput
}

export interface GQLUserInput {
  name?: Array<GQLHumanNameInput | null>
  role?: string
  primaryOffice?: GQLLocationInput
  currentLocation?: GQLLocationInput
  catchmentArea?: Array<GQLLocationInput | null>
}

export interface GQLCommentInput {
  user?: GQLUserInput
  comment?: string
  createdAt?: GQLDate
}

export interface GQLCertificateInput {
  collector?: GQLRelatedPersonInput
  hasShowedVerifiedDocument?: boolean
  payments?: Array<GQLPaymentInput | null>
  data?: string
}

export interface GQLRelatedPersonInput {
  id?: string
  _fhirID?: string
  relationship?: GQLRelationshipType
  otherRelationship?: string
  individual?: GQLPersonInput
}

export interface GQLPaymentInput {
  paymentId?: string
  type?: GQLPaymentType
  total?: number
  amount?: number
  outcome?: GQLPaymentOutcomeType
  date?: GQLDate
}

export interface GQLDeathRegistrationInput {
  _fhirIDMap?: GQLMap
  registration?: GQLRegistrationInput
  deceased?: GQLPersonInput
  informant?: GQLRelatedPersonInput
  eventLocation?: GQLLocationInput
  mannerOfDeath?: GQLMannerOfDeath
  causeOfDeathMethod?: GQLCauseOfDeathMethodType
  causeOfDeath?: string
  createdAt?: GQLDate
  updatedAt?: GQLDate
}

export interface GQLDummy {
  dummy: string
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver
  Date?: GraphQLScalarType
  Notification?: GQLNotificationTypeResolver
  Person?: GQLPersonTypeResolver
  IdentityType?: GQLIdentityTypeTypeResolver
  HumanName?: GQLHumanNameTypeResolver
  ContactPoint?: GQLContactPointTypeResolver
  Address?: GQLAddressTypeResolver
  Attachment?: GQLAttachmentTypeResolver
  Deceased?: GQLDeceasedTypeResolver
  Location?: GQLLocationTypeResolver
  Identifier?: GQLIdentifierTypeResolver
  BirthRegistration?: GQLBirthRegistrationTypeResolver
  EventRegistration?: {
    __resolveType: GQLEventRegistrationTypeResolver
  }

  Registration?: GQLRegistrationTypeResolver
  RegWorkflow?: GQLRegWorkflowTypeResolver
  User?: GQLUserTypeResolver
  Comment?: GQLCommentTypeResolver
  Certificate?: GQLCertificateTypeResolver
  RelatedPerson?: GQLRelatedPersonTypeResolver
  Payment?: GQLPaymentTypeResolver
  Map?: GraphQLScalarType
  BirthRegResultSet?: GQLBirthRegResultSetTypeResolver
  DeathRegistration?: GQLDeathRegistrationTypeResolver
  DeathRegResultSet?: GQLDeathRegResultSetTypeResolver
  EventRegResultSet?: GQLEventRegResultSetTypeResolver
  RegistrationCount?: GQLRegistrationCountTypeResolver
  Mutation?: GQLMutationTypeResolver
  Dummy?: GQLDummyTypeResolver
}
export interface GQLQueryTypeResolver<TParent = any> {
  listNotifications?: QueryToListNotificationsResolver<TParent>
  fetchBirthRegistration?: QueryToFetchBirthRegistrationResolver<TParent>
  queryRegistrationByIdentifier?: QueryToQueryRegistrationByIdentifierResolver<
    TParent
  >
  queryPersonByIdentifier?: QueryToQueryPersonByIdentifierResolver<TParent>
  listBirthRegistrations?: QueryToListBirthRegistrationsResolver<TParent>
  fetchDeathRegistration?: QueryToFetchDeathRegistrationResolver<TParent>
  listDeathRegistrations?: QueryToListDeathRegistrationsResolver<TParent>
  fetchEventRegistration?: QueryToFetchEventRegistrationResolver<TParent>
  listEventRegistrations?: QueryToListEventRegistrationsResolver<TParent>
  countEventRegistrations?: QueryToCountEventRegistrationsResolver<TParent>
  locationsByParent?: QueryToLocationsByParentResolver<TParent>
  locationById?: QueryToLocationByIdResolver<TParent>
  getUser?: QueryToGetUserResolver<TParent>
}

export interface QueryToListNotificationsArgs {
  locationIds?: Array<string | null>
  status?: string
  userId?: string
  from?: GQLDate
  to?: GQLDate
}
export interface QueryToListNotificationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListNotificationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchBirthRegistrationArgs {
  id: string
}
export interface QueryToFetchBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchBirthRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryRegistrationByIdentifierArgs {
  identifier: string
}
export interface QueryToQueryRegistrationByIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryRegistrationByIdentifierArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToQueryPersonByIdentifierArgs {
  identifier: string
}
export interface QueryToQueryPersonByIdentifierResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToQueryPersonByIdentifierArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToListBirthRegistrationsArgs {
  locationIds?: Array<string | null>
  status?: string
  userId?: string
  from?: GQLDate
  to?: GQLDate
  count?: number
  skip?: number
}
export interface QueryToListBirthRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListBirthRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchDeathRegistrationArgs {
  id: string
}
export interface QueryToFetchDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchDeathRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToListDeathRegistrationsArgs {
  locationIds?: Array<string | null>
  status?: string
  userId?: string
  from?: GQLDate
  to?: GQLDate
  count?: number
  skip?: number
}
export interface QueryToListDeathRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListDeathRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToFetchEventRegistrationArgs {
  id: string
}
export interface QueryToFetchEventRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToFetchEventRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToListEventRegistrationsArgs {
  locationIds?: Array<string | null>
  status?: string
  userId?: string
  from?: GQLDate
  to?: GQLDate
  count?: number
  skip?: number
}
export interface QueryToListEventRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToListEventRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToCountEventRegistrationsArgs {
  locationIds?: Array<string | null>
}
export interface QueryToCountEventRegistrationsResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToCountEventRegistrationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToLocationsByParentArgs {
  parentId?: string
  type?: string
}
export interface QueryToLocationsByParentResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: QueryToLocationsByParentArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToLocationByIdArgs {
  locationId?: string
}
export interface QueryToLocationByIdResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToLocationByIdArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface QueryToGetUserArgs {
  userId?: string
}
export interface QueryToGetUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToGetUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLNotificationTypeResolver<TParent = any> {
  id?: NotificationToIdResolver<TParent>
  child?: NotificationToChildResolver<TParent>
  mother?: NotificationToMotherResolver<TParent>
  father?: NotificationToFatherResolver<TParent>
  informant?: NotificationToInformantResolver<TParent>
  location?: NotificationToLocationResolver<TParent>
  createdAt?: NotificationToCreatedAtResolver<TParent>
  updatedAt?: NotificationToUpdatedAtResolver<TParent>
}

export interface NotificationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToChildResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToMotherResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToFatherResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToInformantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface NotificationToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLPersonTypeResolver<TParent = any> {
  id?: PersonToIdResolver<TParent>
  _fhirID?: PersonTo_fhirIDResolver<TParent>
  identifier?: PersonToIdentifierResolver<TParent>
  name?: PersonToNameResolver<TParent>
  telecom?: PersonToTelecomResolver<TParent>
  gender?: PersonToGenderResolver<TParent>
  birthDate?: PersonToBirthDateResolver<TParent>
  maritalStatus?: PersonToMaritalStatusResolver<TParent>
  dateOfMarriage?: PersonToDateOfMarriageResolver<TParent>
  multipleBirth?: PersonToMultipleBirthResolver<TParent>
  address?: PersonToAddressResolver<TParent>
  photo?: PersonToPhotoResolver<TParent>
  deceased?: PersonToDeceasedResolver<TParent>
  nationality?: PersonToNationalityResolver<TParent>
  educationalAttainment?: PersonToEducationalAttainmentResolver<TParent>
}

export interface PersonToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToTelecomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToBirthDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToMaritalStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToDateOfMarriageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToMultipleBirthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToPhotoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToDeceasedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToNationalityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PersonToEducationalAttainmentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLIdentityTypeTypeResolver<TParent = any> {
  id?: IdentityTypeToIdResolver<TParent>
  type?: IdentityTypeToTypeResolver<TParent>
  otherType?: IdentityTypeToOtherTypeResolver<TParent>
}

export interface IdentityTypeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface IdentityTypeToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface IdentityTypeToOtherTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLHumanNameTypeResolver<TParent = any> {
  use?: HumanNameToUseResolver<TParent>
  firstNames?: HumanNameToFirstNamesResolver<TParent>
  familyName?: HumanNameToFamilyNameResolver<TParent>
}

export interface HumanNameToUseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HumanNameToFirstNamesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface HumanNameToFamilyNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLContactPointTypeResolver<TParent = any> {
  system?: ContactPointToSystemResolver<TParent>
  value?: ContactPointToValueResolver<TParent>
  use?: ContactPointToUseResolver<TParent>
}

export interface ContactPointToSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ContactPointToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface ContactPointToUseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAddressTypeResolver<TParent = any> {
  use?: AddressToUseResolver<TParent>
  type?: AddressToTypeResolver<TParent>
  text?: AddressToTextResolver<TParent>
  line?: AddressToLineResolver<TParent>
  city?: AddressToCityResolver<TParent>
  district?: AddressToDistrictResolver<TParent>
  state?: AddressToStateResolver<TParent>
  postalCode?: AddressToPostalCodeResolver<TParent>
  country?: AddressToCountryResolver<TParent>
  from?: AddressToFromResolver<TParent>
  to?: AddressToToResolver<TParent>
}

export interface AddressToUseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToDistrictResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToPostalCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToFromResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AddressToToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLAttachmentTypeResolver<TParent = any> {
  id?: AttachmentToIdResolver<TParent>
  _fhirID?: AttachmentTo_fhirIDResolver<TParent>
  contentType?: AttachmentToContentTypeResolver<TParent>
  data?: AttachmentToDataResolver<TParent>
  status?: AttachmentToStatusResolver<TParent>
  originalFileName?: AttachmentToOriginalFileNameResolver<TParent>
  systemFileName?: AttachmentToSystemFileNameResolver<TParent>
  type?: AttachmentToTypeResolver<TParent>
  description?: AttachmentToDescriptionResolver<TParent>
  subject?: AttachmentToSubjectResolver<TParent>
  createdAt?: AttachmentToCreatedAtResolver<TParent>
}

export interface AttachmentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToContentTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToOriginalFileNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToSystemFileNameResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface AttachmentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeceasedTypeResolver<TParent = any> {
  deceased?: DeceasedToDeceasedResolver<TParent>
  deathDate?: DeceasedToDeathDateResolver<TParent>
}

export interface DeceasedToDeceasedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeceasedToDeathDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLLocationTypeResolver<TParent = any> {
  id?: LocationToIdResolver<TParent>
  _fhirID?: LocationTo_fhirIDResolver<TParent>
  identifier?: LocationToIdentifierResolver<TParent>
  status?: LocationToStatusResolver<TParent>
  name?: LocationToNameResolver<TParent>
  alias?: LocationToAliasResolver<TParent>
  description?: LocationToDescriptionResolver<TParent>
  partOf?: LocationToPartOfResolver<TParent>
  type?: LocationToTypeResolver<TParent>
  telecom?: LocationToTelecomResolver<TParent>
  address?: LocationToAddressResolver<TParent>
  longitude?: LocationToLongitudeResolver<TParent>
  latitude?: LocationToLatitudeResolver<TParent>
  altitude?: LocationToAltitudeResolver<TParent>
  geoData?: LocationToGeoDataResolver<TParent>
}

export interface LocationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToAliasResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToPartOfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToTelecomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToLongitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToLatitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToAltitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface LocationToGeoDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLIdentifierTypeResolver<TParent = any> {
  system?: IdentifierToSystemResolver<TParent>
  value?: IdentifierToValueResolver<TParent>
}

export interface IdentifierToSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface IdentifierToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthRegistrationTypeResolver<TParent = any> {
  id?: BirthRegistrationToIdResolver<TParent>
  _fhirIDMap?: BirthRegistrationTo_fhirIDMapResolver<TParent>
  registration?: BirthRegistrationToRegistrationResolver<TParent>
  child?: BirthRegistrationToChildResolver<TParent>
  mother?: BirthRegistrationToMotherResolver<TParent>
  father?: BirthRegistrationToFatherResolver<TParent>
  informant?: BirthRegistrationToInformantResolver<TParent>
  eventLocation?: BirthRegistrationToEventLocationResolver<TParent>
  birthType?: BirthRegistrationToBirthTypeResolver<TParent>
  weightAtBirth?: BirthRegistrationToWeightAtBirthResolver<TParent>
  attendantAtBirth?: BirthRegistrationToAttendantAtBirthResolver<TParent>
  otherAttendantAtBirth?: BirthRegistrationToOtherAttendantAtBirthResolver<
    TParent
  >
  birthRegistrationType?: BirthRegistrationToBirthRegistrationTypeResolver<
    TParent
  >
  presentAtBirthRegistration?: BirthRegistrationToPresentAtBirthRegistrationResolver<
    TParent
  >
  otherPresentAtBirthRegistration?: BirthRegistrationToOtherPresentAtBirthRegistrationResolver<
    TParent
  >
  childrenBornAliveToMother?: BirthRegistrationToChildrenBornAliveToMotherResolver<
    TParent
  >
  foetalDeathsToMother?: BirthRegistrationToFoetalDeathsToMotherResolver<
    TParent
  >
  lastPreviousLiveBirth?: BirthRegistrationToLastPreviousLiveBirthResolver<
    TParent
  >
  createdAt?: BirthRegistrationToCreatedAtResolver<TParent>
  updatedAt?: BirthRegistrationToUpdatedAtResolver<TParent>
}

export interface BirthRegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationTo_fhirIDMapResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToChildResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToFatherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToInformantResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToEventLocationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToBirthTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToWeightAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToAttendantAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToOtherAttendantAtBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToBirthRegistrationTypeResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToPresentAtBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToOtherPresentAtBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToChildrenBornAliveToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToFoetalDeathsToMotherResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToLastPreviousLiveBirthResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegistrationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventRegistrationTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo):
    | 'BirthRegistration'
    | 'DeathRegistration'
}
export interface GQLRegistrationTypeResolver<TParent = any> {
  id?: RegistrationToIdResolver<TParent>
  _fhirID?: RegistrationTo_fhirIDResolver<TParent>
  trackingId?: RegistrationToTrackingIdResolver<TParent>
  registrationNumber?: RegistrationToRegistrationNumberResolver<TParent>
  paperFormID?: RegistrationToPaperFormIDResolver<TParent>
  page?: RegistrationToPageResolver<TParent>
  book?: RegistrationToBookResolver<TParent>
  contact?: RegistrationToContactResolver<TParent>
  contactPhoneNumber?: RegistrationToContactPhoneNumberResolver<TParent>
  status?: RegistrationToStatusResolver<TParent>
  type?: RegistrationToTypeResolver<TParent>
  attachments?: RegistrationToAttachmentsResolver<TParent>
  certificates?: RegistrationToCertificatesResolver<TParent>
  duplicates?: RegistrationToDuplicatesResolver<TParent>
}

export interface RegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToTrackingIdResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToRegistrationNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToPaperFormIDResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToBookResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToContactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToContactPhoneNumberResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToAttachmentsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToCertificatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationToDuplicatesResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegWorkflowTypeResolver<TParent = any> {
  id?: RegWorkflowToIdResolver<TParent>
  type?: RegWorkflowToTypeResolver<TParent>
  user?: RegWorkflowToUserResolver<TParent>
  timestamp?: RegWorkflowToTimestampResolver<TParent>
  comments?: RegWorkflowToCommentsResolver<TParent>
  location?: RegWorkflowToLocationResolver<TParent>
  office?: RegWorkflowToOfficeResolver<TParent>
}

export interface RegWorkflowToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToTimestampResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegWorkflowToOfficeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>
  userMgntUserID?: UserToUserMgntUserIDResolver<TParent>
  name?: UserToNameResolver<TParent>
  role?: UserToRoleResolver<TParent>
  primaryOffice?: UserToPrimaryOfficeResolver<TParent>
  currentLocation?: UserToCurrentLocationResolver<TParent>
  catchmentArea?: UserToCatchmentAreaResolver<TParent>
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToUserMgntUserIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToPrimaryOfficeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToCurrentLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface UserToCatchmentAreaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>
  user?: CommentToUserResolver<TParent>
  comment?: CommentToCommentResolver<TParent>
  createdAt?: CommentToCreatedAtResolver<TParent>
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLCertificateTypeResolver<TParent = any> {
  collector?: CertificateToCollectorResolver<TParent>
  hasShowedVerifiedDocument?: CertificateToHasShowedVerifiedDocumentResolver<
    TParent
  >
  payments?: CertificateToPaymentsResolver<TParent>
  data?: CertificateToDataResolver<TParent>
}

export interface CertificateToCollectorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateToHasShowedVerifiedDocumentResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateToPaymentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface CertificateToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRelatedPersonTypeResolver<TParent = any> {
  id?: RelatedPersonToIdResolver<TParent>
  _fhirID?: RelatedPersonTo_fhirIDResolver<TParent>
  relationship?: RelatedPersonToRelationshipResolver<TParent>
  otherRelationship?: RelatedPersonToOtherRelationshipResolver<TParent>
  individual?: RelatedPersonToIndividualResolver<TParent>
}

export interface RelatedPersonToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonTo_fhirIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToOtherRelationshipResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RelatedPersonToIndividualResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLPaymentTypeResolver<TParent = any> {
  paymentId?: PaymentToPaymentIdResolver<TParent>
  type?: PaymentToTypeResolver<TParent>
  total?: PaymentToTotalResolver<TParent>
  amount?: PaymentToAmountResolver<TParent>
  outcome?: PaymentToOutcomeResolver<TParent>
  date?: PaymentToDateResolver<TParent>
}

export interface PaymentToPaymentIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToOutcomeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface PaymentToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLBirthRegResultSetTypeResolver<TParent = any> {
  results?: BirthRegResultSetToResultsResolver<TParent>
  totalItems?: BirthRegResultSetToTotalItemsResolver<TParent>
}

export interface BirthRegResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface BirthRegResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeathRegistrationTypeResolver<TParent = any> {
  id?: DeathRegistrationToIdResolver<TParent>
  _fhirIDMap?: DeathRegistrationTo_fhirIDMapResolver<TParent>
  registration?: DeathRegistrationToRegistrationResolver<TParent>
  deceased?: DeathRegistrationToDeceasedResolver<TParent>
  informant?: DeathRegistrationToInformantResolver<TParent>
  eventLocation?: DeathRegistrationToEventLocationResolver<TParent>
  mannerOfDeath?: DeathRegistrationToMannerOfDeathResolver<TParent>
  causeOfDeathMethod?: DeathRegistrationToCauseOfDeathMethodResolver<TParent>
  causeOfDeath?: DeathRegistrationToCauseOfDeathResolver<TParent>
  createdAt?: DeathRegistrationToCreatedAtResolver<TParent>
  updatedAt?: DeathRegistrationToUpdatedAtResolver<TParent>
}

export interface DeathRegistrationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationTo_fhirIDMapResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToDeceasedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToInformantResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToEventLocationResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToMannerOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCauseOfDeathMethodResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCauseOfDeathResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToCreatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegistrationToUpdatedAtResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLDeathRegResultSetTypeResolver<TParent = any> {
  results?: DeathRegResultSetToResultsResolver<TParent>
  totalItems?: DeathRegResultSetToTotalItemsResolver<TParent>
}

export interface DeathRegResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface DeathRegResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLEventRegResultSetTypeResolver<TParent = any> {
  results?: EventRegResultSetToResultsResolver<TParent>
  totalItems?: EventRegResultSetToTotalItemsResolver<TParent>
}

export interface EventRegResultSetToResultsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface EventRegResultSetToTotalItemsResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLRegistrationCountTypeResolver<TParent = any> {
  declared?: RegistrationCountToDeclaredResolver<TParent>
  rejected?: RegistrationCountToRejectedResolver<TParent>
}

export interface RegistrationCountToDeclaredResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface RegistrationCountToRejectedResolver<
  TParent = any,
  TResult = any
> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}

export interface GQLMutationTypeResolver<TParent = any> {
  createNotification?: MutationToCreateNotificationResolver<TParent>
  voidNotification?: MutationToVoidNotificationResolver<TParent>
  createBirthRegistration?: MutationToCreateBirthRegistrationResolver<TParent>
  updateBirthRegistration?: MutationToUpdateBirthRegistrationResolver<TParent>
  markBirthAsVerified?: MutationToMarkBirthAsVerifiedResolver<TParent>
  markBirthAsRegistered?: MutationToMarkBirthAsRegisteredResolver<TParent>
  markBirthAsCertified?: MutationToMarkBirthAsCertifiedResolver<TParent>
  markEventAsVoided?: MutationToMarkEventAsVoidedResolver<TParent>
  notADuplicate?: MutationToNotADuplicateResolver<TParent>
  createDeathRegistration?: MutationToCreateDeathRegistrationResolver<TParent>
  updateDeathRegistration?: MutationToUpdateDeathRegistrationResolver<TParent>
  markDeathAsVerified?: MutationToMarkDeathAsVerifiedResolver<TParent>
  markDeathAsRegistered?: MutationToMarkDeathAsRegisteredResolver<TParent>
  markDeathAsCertified?: MutationToMarkDeathAsCertifiedResolver<TParent>
}

export interface MutationToCreateNotificationArgs {
  details: GQLNotificationInput
}
export interface MutationToCreateNotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateNotificationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToVoidNotificationArgs {
  id: string
}
export interface MutationToVoidNotificationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToVoidNotificationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateBirthRegistrationArgs {
  details: GQLBirthRegistrationInput
}
export interface MutationToCreateBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateBirthRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateBirthRegistrationArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToUpdateBirthRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateBirthRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsVerifiedArgs {
  id: string
  details?: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsVerifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsVerifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsRegisteredArgs {
  id: string
  details?: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsRegisteredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsRegisteredArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkBirthAsCertifiedArgs {
  id: string
  details: GQLBirthRegistrationInput
}
export interface MutationToMarkBirthAsCertifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkBirthAsCertifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkEventAsVoidedArgs {
  id: string
  reason: string
  comment?: string
}
export interface MutationToMarkEventAsVoidedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkEventAsVoidedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToNotADuplicateArgs {
  id: string
  duplicateId: string
}
export interface MutationToNotADuplicateResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToNotADuplicateArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToCreateDeathRegistrationArgs {
  details: GQLDeathRegistrationInput
}
export interface MutationToCreateDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToCreateDeathRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToUpdateDeathRegistrationArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToUpdateDeathRegistrationResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToUpdateDeathRegistrationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsVerifiedArgs {
  id: string
  details?: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsVerifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsVerifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsRegisteredArgs {
  id: string
  details?: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsRegisteredResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsRegisteredArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface MutationToMarkDeathAsCertifiedArgs {
  id: string
  details: GQLDeathRegistrationInput
}
export interface MutationToMarkDeathAsCertifiedResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToMarkDeathAsCertifiedArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult
}

export interface GQLDummyTypeResolver<TParent = any> {
  dummy?: DummyToDummyResolver<TParent>
}

export interface DummyToDummyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult
}
