# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.

scalar DateTime

type Event {
  type: String!
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  actions: [Action!]!
}

input EventInput {
  type: String!
}

type Field {
  id: String!
  value: FieldValue!
}

input FieldInput {
  id: String!
  value: FieldValue!
}

union Action = CreateAction | RegisterAction | NotifyAction | DeclareAction

type CreateAction {
  type: String!
  createdAt: DateTime!
  createdBy: String!
  fields: [Field!]!
}

type NotifyAction {
  type: String!
  createdAt: DateTime!
  createdBy: String!
  fields: [Field!]!
}

type DeclareAction {
  type: String!
  createdAt: DateTime!
  createdBy: String!
  fields: [Field!]!
  identifiers: Identifiers!
}

type RegisterAction {
  type: String!
  createdAt: DateTime!
  createdBy: String!
  fields: [Field!]!
  identifiers: Identifiers!
}

input NotifyActionInput {
  fields: [FieldInput!]!
}

input DeclareActionInput {
  fields: [FieldInput!]!
}

input RegisterActionInput {
  fields: [FieldInput!]!
}

input CertifyActionInput {
  fields: [FieldInput!]!
}

input IssueActionInput {
  fields: [FieldInput!]!
}

input RevokeActionInput {
  fields: [FieldInput!]!
}

input ReinstateActionInput {
  fields: [FieldInput!]!
}

input RevokeCorrectionActionInput {
  fields: [FieldInput!]!
}

input RequestCorrectionActionInput {
  fields: [FieldInput!]!
}

input ApproveCorrectionActionInput {
  fields: [FieldInput!]!
}

input RejectCorrectionActionInput {
  fields: [FieldInput!]!
}

type Identifiers {
  trackingId: String!
  registrationNumber: String!
}

input IdentifiersInput {
  trackingId: String!
  registrationNumber: String!
}

type Query {
  getEvent(eventId: ID!): Event!
}

type Mutation {
  createEvent(event: EventInput!): Event!
  notifyEvent(eventId: ID!, input: NotifyActionInput!): Event!
  declareEvent(eventId: ID!, input: DeclareActionInput!): Event!
  registerEvent(eventId: ID!, input: RegisterActionInput!): Event!
  certifyEvent(eventId: ID!, input: CertifyActionInput!): Event!
  issueEvent(eventId: ID!, input: IssueActionInput!): Event!
  revokeEvent(eventId: ID!, input: RevokeActionInput!): Event!
  reinstateEvent(eventId: ID!, input: ReinstateActionInput!): Event!
  revokeCorrectionEvent(
    eventId: ID!
    input: RevokeCorrectionActionInput!
  ): Event!
  requestCorrectionEvent(
    eventId: ID!
    input: RequestCorrectionActionInput!
  ): Event!
  approveCorrectionEvent(
    eventId: ID!
    input: ApproveCorrectionActionInput!
  ): Event!
  rejectCorrectionEvent(
    eventId: ID!
    input: RejectCorrectionActionInput!
  ): Event!
}
